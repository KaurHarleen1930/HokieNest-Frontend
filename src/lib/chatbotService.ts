// Chatbot service for handling intelligent responses and integrations
export interface ChatbotResponse {
  text: string;
  suggestions?: string[];
  actions?: ChatbotAction[];
  type: 'text' | 'suggestion' | 'action' | 'redirect';
}

export interface ChatbotAction {
  label: string;
  action: () => void;
  type: 'navigate' | 'api' | 'function';
}

export interface UserContext {
  isAuthenticated: boolean;
  hasCompletedProfile: boolean;
  hasHousingPreferences: boolean;
  hasRoommatePreferences: boolean;
  currentPage?: string;
}

export class ChatbotService {
  private userContext: UserContext;

  constructor(userContext: UserContext) {
    this.userContext = userContext;
  }

  async generateResponse(userInput: string): Promise<ChatbotResponse> {
    const input = userInput.toLowerCase().trim();
    
    // Analyze user intent
    const intent = this.analyzeIntent(input);
    
    // Generate contextual response
    return this.generateContextualResponse(intent, input);
  }

  private analyzeIntent(input: string): string {
    // Housing-related intents
    if (this.containsAny(input, ['housing', 'apartment', 'rent', 'property', 'home', 'place to live'])) {
      return 'housing_search';
    }
    
    if (this.containsAny(input, ['budget', 'price', 'cost', 'afford', 'expensive', 'cheap'])) {
      return 'budget_help';
    }
    
    if (this.containsAny(input, ['location', 'area', 'neighborhood', 'distance', 'commute', 'close to campus'])) {
      return 'location_help';
    }
    
    if (this.containsAny(input, ['safety', 'security', 'crime', 'safe', 'dangerous'])) {
      return 'safety_help';
    }
    
    // Roommate-related intents
    if (this.containsAny(input, ['roommate', 'roommate matching', 'compatible', 'find roommate', 'share'])) {
      return 'roommate_matching';
    }
    
    if (this.containsAny(input, ['questionnaire', 'form', 'preferences', 'lifestyle', 'compatibility'])) {
      return 'questionnaire_help';
    }
    
    // Priority-related intents
    if (this.containsAny(input, ['priority', 'preference', 'weight', 'importance', 'ranking'])) {
      return 'priority_help';
    }
    
    if (this.containsAny(input, ['dashboard', 'analytics', 'insights', 'recommendations'])) {
      return 'dashboard_help';
    }
    
    // Navigation intents
    if (this.containsAny(input, ['navigate', 'go to', 'show me', 'take me to', 'where is'])) {
      return 'navigation';
    }
    
    // Help intents
    if (this.containsAny(input, ['help', 'tutorial', 'guide', 'how to', 'what is', 'explain'])) {
      return 'help';
    }
    
    // Greeting intents
    if (this.containsAny(input, ['hello', 'hi', 'hey', 'start', 'begin', 'welcome'])) {
      return 'greeting';
    }
    
    return 'general';
  }

  private containsAny(input: string, keywords: string[]): boolean {
    return keywords.some(keyword => input.includes(keyword));
  }

  private generateContextualResponse(intent: string, input: string): ChatbotResponse {
    switch (intent) {
      case 'housing_search':
        return this.getHousingSearchResponse();
      
      case 'budget_help':
        return this.getBudgetHelpResponse();
      
      case 'location_help':
        return this.getLocationHelpResponse();
      
      case 'safety_help':
        return this.getSafetyHelpResponse();
      
      case 'roommate_matching':
        return this.getRoommateMatchingResponse();
      
      case 'questionnaire_help':
        return this.getQuestionnaireHelpResponse();
      
      case 'priority_help':
        return this.getPriorityHelpResponse();
      
      case 'dashboard_help':
        return this.getDashboardHelpResponse();
      
      case 'navigation':
        return this.getNavigationResponse(input);
      
      case 'help':
        return this.getHelpResponse();
      
      case 'greeting':
        return this.getGreetingResponse();
      
      default:
        return this.getGeneralResponse();
    }
  }

  private getHousingSearchResponse(): ChatbotResponse {
    const suggestions = [
      "Show me properties",
      "Set my budget",
      "Filter by location",
      "View safety data"
    ];

    return {
      text: "üè† **Finding Your Perfect Home**\n\nI can help you discover housing options that match your needs! Here's what you can do:\n\n**Browse Properties:**\n‚Ä¢ View all available housing\n‚Ä¢ Filter by price, location, and amenities\n‚Ä¢ See detailed property information\n‚Ä¢ Check safety scores and neighborhood data\n\n**Personalized Search:**\n‚Ä¢ Set your housing priorities for better matches\n‚Ä¢ Get recommendations based on your preferences\n‚Ä¢ Save favorite properties\n‚Ä¢ Set up alerts for new listings\n\nWhat type of housing are you looking for?",
      suggestions,
      type: 'suggestion'
    };
  }

  private getBudgetHelpResponse(): ChatbotResponse {
    const suggestions = [
      "Under $800/month",
      "$800-1200/month", 
      "$1200-1600/month",
      "Over $1600/month"
    ];

    return {
      text: "üí∞ **Budget Planning Made Easy**\n\nLet me help you find housing that fits your budget! Here's what to consider:\n\n**Monthly Costs:**\n‚Ä¢ Rent (primary expense)\n‚Ä¢ Utilities (electricity, water, internet)\n‚Ä¢ Parking fees\n‚Ä¢ Renter's insurance\n‚Ä¢ Groceries and living expenses\n\n**Budget Guidelines:**\n‚Ä¢ Aim for 30% of income on housing\n‚Ä¢ Factor in all living costs, not just rent\n‚Ä¢ Consider roommate cost-sharing\n‚Ä¢ Look for utilities-included options\n\n**Smart Tips:**\n‚Ä¢ Set a realistic budget range\n‚Ä¢ Consider transportation costs\n‚Ä¢ Plan for unexpected expenses\n‚Ä¢ Use our budget calculator\n\nWhat's your monthly budget range?",
      suggestions,
      type: 'suggestion'
    };
  }

  private getLocationHelpResponse(): ChatbotResponse {
    const suggestions = [
      "Near campus",
      "Downtown area",
      "Quiet neighborhood",
      "Public transport access"
    ];

    return {
      text: "üìç **Location, Location, Location!**\n\nFinding the right area is crucial for your housing search. Here's what to consider:\n\n**Distance Factors:**\n‚Ä¢ Walking distance to campus\n‚Ä¢ Public transportation access\n‚Ä¢ Commute time to work/classes\n‚Ä¢ Proximity to amenities\n\n**Neighborhood Features:**\n‚Ä¢ Safety and security\n‚Ä¢ Local restaurants and shops\n‚Ä¢ Grocery stores and services\n‚Ä¢ Parks and recreation\n\n**Transportation Options:**\n‚Ä¢ Bus routes and schedules\n‚Ä¢ Bike-friendly areas\n‚Ä¢ Parking availability\n‚Ä¢ Ride-sharing accessibility\n\nWhat's most important to you in a location?",
      suggestions,
      type: 'suggestion'
    };
  }

  private getSafetyHelpResponse(): ChatbotResponse {
    const suggestions = [
      "Show safety data",
      "Safe neighborhoods",
      "Campus proximity",
      "Security features"
    ];

    return {
      text: "üõ°Ô∏è **Your Safety is Our Priority**\n\nSafety is a top concern when choosing housing. Here's how we help:\n\n**Safety Features:**\n‚Ä¢ Crime statistics and safety scores\n‚Ä¢ Neighborhood safety ratings\n‚Ä¢ Well-lit areas and security measures\n‚Ä¢ Proximity to campus security\n‚Ä¢ Safe transportation options\n\n**Safety Tips:**\n‚Ä¢ Visit neighborhoods at different times\n‚Ä¢ Check local crime statistics\n‚Ä¢ Ask about building security\n‚Ä¢ Consider proximity to campus\n‚Ä¢ Look for well-lit areas\n\n**Our Safety Tools:**\n‚Ä¢ Real-time crime data\n‚Ä¢ Safety score ratings\n‚Ä¢ Neighborhood comparisons\n‚Ä¢ Security feature listings\n\nWould you like to see safety data for specific areas?",
      suggestions,
      type: 'suggestion'
    };
  }

  private getRoommateMatchingResponse(): ChatbotResponse {
    const suggestions = [
      "Start questionnaire",
      "View my matches",
      "Update preferences",
      "How does matching work?"
    ];

    return {
      text: "ü§ù **Find Your Perfect Roommate**\n\nOur roommate matching system helps you find compatible living partners! Here's how it works:\n\n**The Matching Process:**\n1. **Complete Questionnaire:** Share your lifestyle preferences\n2. **Set Priorities:** Define what matters most to you\n3. **Algorithm Matching:** We find compatible roommates\n4. **Review Matches:** See compatibility scores and profiles\n5. **Connect:** Start conversations with potential roommates\n\n**What We Match On:**\n‚Ä¢ Lifestyle compatibility (cleanliness, sleep schedule)\n‚Ä¢ Housing preferences (budget, location)\n‚Ä¢ Social preferences (guests, parties)\n‚Ä¢ Work/study habits\n‚Ä¢ Pet preferences\n\n**Compatibility Scoring:**\n‚Ä¢ 90-100%: Excellent match\n‚Ä¢ 80-89%: Very good match\n‚Ä¢ 70-79%: Good match\n‚Ä¢ 60-69%: Fair match\n\nReady to find your ideal roommate?",
      suggestions,
      type: 'suggestion'
    };
  }

  private getQuestionnaireHelpResponse(): ChatbotResponse {
    const suggestions = [
      "Start questionnaire",
      "View my answers",
      "Update preferences",
      "Skip for now"
    ];

    return {
      text: "üìù **Roommate Questionnaire Guide**\n\nThe questionnaire helps us find your perfect roommate match! Here's what to expect:\n\n**Question Categories:**\n‚Ä¢ **Lifestyle:** Cleanliness, sleep schedule, social habits\n‚Ä¢ **Housing:** Budget, location preferences, amenities\n‚Ä¢ **Work/Study:** Schedule, work-from-home needs\n‚Ä¢ **Social:** Guest preferences, party habits\n‚Ä¢ **Pets:** Pet ownership and comfort levels\n\n**Tips for Best Results:**\n‚Ä¢ Be honest about your preferences\n‚Ä¢ Consider your ideal living situation\n‚Ä¢ Think about deal-breakers\n‚Ä¢ Consider compromise areas\n\n**Why It Matters:**\n‚Ä¢ Better compatibility matches\n‚Ä¢ Reduced roommate conflicts\n‚Ä¢ More successful living arrangements\n‚Ä¢ Higher satisfaction rates\n\nReady to start the questionnaire?",
      suggestions,
      type: 'suggestion'
    };
  }

  private getPriorityHelpResponse(): ChatbotResponse {
    const suggestions = [
      "Set my priorities",
      "View priority dashboard",
      "How to optimize",
      "See examples"
    ];

    return {
      text: "üéØ **Housing Priorities Explained**\n\nPriorities help us find housing that truly matches your needs! Here's how it works:\n\n**The 4 Key Priorities:**\n‚Ä¢ **Budget (25-40%):** Your financial comfort zone\n‚Ä¢ **Commute (20-35%):** Distance from campus/work\n‚Ä¢ **Safety (15-30%):** Neighborhood security\n‚Ä¢ **Roommates (10-25%):** Compatibility with potential roommates\n\n**How Priority Scoring Works:**\n1. Set your priority percentages (must total 100%)\n2. We score properties based on your priorities\n3. Get personalized recommendations\n4. Find roommates with similar priorities\n\n**Priority Examples:**\n‚Ä¢ **Budget-Focused:** 40% budget, 25% commute, 20% safety, 15% roommates\n‚Ä¢ **Location-Focused:** 25% budget, 35% commute, 25% safety, 15% roommates\n‚Ä¢ **Safety-Focused:** 30% budget, 20% commute, 35% safety, 15% roommates\n\n**Benefits:**\n‚Ä¢ More relevant property recommendations\n‚Ä¢ Better roommate compatibility\n‚Ä¢ Saves time in your search\n‚Ä¢ Higher satisfaction with choices\n\nReady to set your priorities?",
      suggestions,
      type: 'suggestion'
    };
  }

  private getDashboardHelpResponse(): ChatbotResponse {
    const suggestions = [
      "View my dashboard",
      "Update priorities",
      "See recommendations",
      "Analytics insights"
    ];

    return {
      text: "üìä **Your Priority Dashboard**\n\nThe dashboard is your command center for managing housing preferences! Here's what you'll find:\n\n**Dashboard Features:**\n‚Ä¢ **Current Priorities:** View and adjust your settings\n‚Ä¢ **Recommendations:** Personalized property suggestions\n‚Ä¢ **Analytics:** Insights into your preferences\n‚Ä¢ **Optimization Tips:** Ways to improve your matches\n\n**What You Can Do:**\n‚Ä¢ Adjust priority weights in real-time\n‚Ä¢ See how changes affect recommendations\n‚Ä¢ View detailed score breakdowns\n‚Ä¢ Track your preference evolution\n‚Ä¢ Get optimization suggestions\n\n**Analytics Insights:**\n‚Ä¢ Priority distribution charts\n‚Ä¢ Recommendation quality scores\n‚Ä¢ Match success rates\n‚Ä¢ Preference trends over time\n\n**Quick Actions:**\n‚Ä¢ Save favorite properties\n‚Ä¢ Share preferences with roommates\n‚Ä¢ Export your settings\n‚Ä¢ Reset to defaults\n\nReady to explore your dashboard?",
      suggestions,
      type: 'suggestion'
    };
  }

  private getNavigationResponse(input: string): ChatbotResponse {
    const suggestions = [
      "Go to Properties",
      "Open Profile",
      "View Dashboard",
      "Roommate Matching"
    ];

    return {
      text: "üß≠ **Navigation Help**\n\nI can help you get to where you need to go! Here are the main sections:\n\n**Key Pages:**\n‚Ä¢ **Properties:** Browse and search housing\n‚Ä¢ **Profile:** Manage your preferences and settings\n‚Ä¢ **Dashboard:** View your priority dashboard\n‚Ä¢ **Roommate Matching:** Find compatible roommates\n‚Ä¢ **Dashboard:** Your personalized overview\n\n**Quick Navigation:**\n‚Ä¢ Use the top navigation menu\n‚Ä¢ Check the sidebar for quick access\n‚Ä¢ Use keyboard shortcuts (Ctrl+K for search)\n‚Ä¢ Bookmark your favorite pages\n\nWhere would you like to go?",
      suggestions,
      type: 'suggestion'
    };
  }

  private getHelpResponse(): ChatbotResponse {
    const suggestions = [
      "Complete my profile",
      "Browse properties",
      "Find roommates",
      "Set priorities"
    ];

    return {
      text: "üìö **HokieNest Help Center**\n\nI'm here to guide you through everything! Here's your quick start guide:\n\n**Getting Started:**\n1Ô∏è‚É£ **Complete Your Profile**\n   ‚Ä¢ Set housing preferences\n   ‚Ä¢ Fill out roommate questionnaire\n   ‚Ä¢ Configure housing priorities\n\n2Ô∏è‚É£ **Find Housing**\n   ‚Ä¢ Browse properties\n   ‚Ä¢ Use filters and search\n   ‚Ä¢ Set up alerts\n\n3Ô∏è‚É£ **Find Roommates**\n   ‚Ä¢ Complete matching questionnaire\n   ‚Ä¢ View compatibility scores\n   ‚Ä¢ Connect with matches\n\n4Ô∏è‚É£ **Manage Priorities**\n   ‚Ä¢ Adjust housing priorities\n   ‚Ä¢ View recommendations\n   ‚Ä¢ Track your preferences\n\n**Need Specific Help?**\n‚Ä¢ Ask me about any feature\n‚Ä¢ Use the suggestions below\n‚Ä¢ Check the help documentation\n‚Ä¢ Contact support if needed\n\nWhat would you like to start with?",
      suggestions,
      type: 'suggestion'
    };
  }

  private getGreetingResponse(): ChatbotResponse {
    const suggestions = [
      "I'm looking for housing",
      "I need a roommate",
      "I'm new to this",
      "Show me around"
    ];

    return {
      text: "üëã **Welcome to HokieNest!**\n\nI'm your personal assistant for finding the perfect housing and roommates! Whether you're a first-time renter or looking for your next place, I'm here to help.\n\n**What I Can Help With:**\n‚Ä¢ üè† Finding housing that fits your budget and needs\n‚Ä¢ ü§ù Matching you with compatible roommates\n‚Ä¢ üéØ Setting up your housing priorities\n‚Ä¢ üß≠ Navigating the platform\n‚Ä¢ ‚ùì Answering questions about the process\n\n**Quick Start Options:**\n‚Ä¢ Browse available properties\n‚Ä¢ Complete your roommate questionnaire\n‚Ä¢ Set up your housing priorities\n‚Ä¢ Explore the platform features\n\nWhat brings you to HokieNest today?",
      suggestions,
      type: 'suggestion'
    };
  }

  private getGeneralResponse(): ChatbotResponse {
    const suggestions = [
      "Find housing",
      "Find roommates",
      "Set priorities",
      "General help"
    ];

    return {
      text: "ü§î **I'm Here to Help!**\n\nI understand you're looking for assistance! I can help you with:\n\n**Housing Search:**\n‚Ä¢ Finding properties that match your needs\n‚Ä¢ Budget planning and cost analysis\n‚Ä¢ Location and safety information\n‚Ä¢ Property comparisons and reviews\n\n**Roommate Matching:**\n‚Ä¢ Connecting with compatible roommates\n‚Ä¢ Lifestyle compatibility assessment\n‚Ä¢ Questionnaire guidance\n‚Ä¢ Match quality explanations\n\n**Priority Management:**\n‚Ä¢ Setting up your housing priorities\n‚Ä¢ Understanding the scoring system\n‚Ä¢ Optimizing your preferences\n‚Ä¢ Dashboard navigation\n\n**Platform Navigation:**\n‚Ä¢ Using all the features effectively\n‚Ä¢ Finding specific information\n‚Ä¢ Troubleshooting issues\n‚Ä¢ Getting the most out of HokieNest\n\nCould you tell me more specifically what you'd like help with?",
      suggestions,
      type: 'suggestion'
    };
  }
}

// Export a default instance
export const createChatbotService = (userContext: UserContext) => new ChatbotService(userContext);


